
sam_r21_imu_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000890  00001000  00001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00001890  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  20000004  00001894  00008004  2**2
                  ALLOC
  3 .stack        00002000  200000a8  00001938  00008004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00008004  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ccdd  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e5f  00000000  00000000  00014d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000350  00000000  00000000  00016bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000002a8  00000000  00000000  00016f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00016464  00000000  00000000  000171d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000794e  00000000  00000000  0002d634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0007d961  00000000  00000000  00034f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000730  00000000  00000000  000b28e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001c1f  00000000  00000000  000b3014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001000 <_sfixed>:
    1000:	200020a8 	.word	0x200020a8
    1004:	0000176d 	.word	0x0000176d
    1008:	00001769 	.word	0x00001769
    100c:	00001769 	.word	0x00001769
	...
    102c:	00001769 	.word	0x00001769
	...
    1038:	00001769 	.word	0x00001769
    103c:	00001769 	.word	0x00001769
    1040:	00001769 	.word	0x00001769
    1044:	00001769 	.word	0x00001769
    1048:	00001769 	.word	0x00001769
    104c:	00001769 	.word	0x00001769
    1050:	000011c1 	.word	0x000011c1
    1054:	00001769 	.word	0x00001769
    1058:	00001769 	.word	0x00001769
    105c:	00000000 	.word	0x00000000
    1060:	00001769 	.word	0x00001769
    1064:	000012c1 	.word	0x000012c1
    1068:	000012d1 	.word	0x000012d1
    106c:	000012e1 	.word	0x000012e1
    1070:	000012f1 	.word	0x000012f1
	...
    107c:	00001769 	.word	0x00001769
    1080:	00001769 	.word	0x00001769
    1084:	00001769 	.word	0x00001769
    1088:	00001745 	.word	0x00001745
    108c:	00001751 	.word	0x00001751
    1090:	0000175d 	.word	0x0000175d
	...
    10ac:	00001769 	.word	0x00001769

000010b0 <__do_global_dtors_aux>:
    10b0:	b510      	push	{r4, lr}
    10b2:	4c06      	ldr	r4, [pc, #24]	; (10cc <__do_global_dtors_aux+0x1c>)
    10b4:	7823      	ldrb	r3, [r4, #0]
    10b6:	2b00      	cmp	r3, #0
    10b8:	d107      	bne.n	10ca <__do_global_dtors_aux+0x1a>
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <__do_global_dtors_aux+0x20>)
    10bc:	2b00      	cmp	r3, #0
    10be:	d002      	beq.n	10c6 <__do_global_dtors_aux+0x16>
    10c0:	4804      	ldr	r0, [pc, #16]	; (10d4 <__do_global_dtors_aux+0x24>)
    10c2:	e000      	b.n	10c6 <__do_global_dtors_aux+0x16>
    10c4:	bf00      	nop
    10c6:	2301      	movs	r3, #1
    10c8:	7023      	strb	r3, [r4, #0]
    10ca:	bd10      	pop	{r4, pc}
    10cc:	20000004 	.word	0x20000004
    10d0:	00000000 	.word	0x00000000
    10d4:	00001890 	.word	0x00001890

000010d8 <frame_dummy>:
    10d8:	b508      	push	{r3, lr}
    10da:	4b08      	ldr	r3, [pc, #32]	; (10fc <frame_dummy+0x24>)
    10dc:	2b00      	cmp	r3, #0
    10de:	d003      	beq.n	10e8 <frame_dummy+0x10>
    10e0:	4807      	ldr	r0, [pc, #28]	; (1100 <frame_dummy+0x28>)
    10e2:	4908      	ldr	r1, [pc, #32]	; (1104 <frame_dummy+0x2c>)
    10e4:	e000      	b.n	10e8 <frame_dummy+0x10>
    10e6:	bf00      	nop
    10e8:	4807      	ldr	r0, [pc, #28]	; (1108 <frame_dummy+0x30>)
    10ea:	6803      	ldr	r3, [r0, #0]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d100      	bne.n	10f2 <frame_dummy+0x1a>
    10f0:	bd08      	pop	{r3, pc}
    10f2:	4b06      	ldr	r3, [pc, #24]	; (110c <frame_dummy+0x34>)
    10f4:	2b00      	cmp	r3, #0
    10f6:	d0fb      	beq.n	10f0 <frame_dummy+0x18>
    10f8:	4798      	blx	r3
    10fa:	e7f9      	b.n	10f0 <frame_dummy+0x18>
    10fc:	00000000 	.word	0x00000000
    1100:	00001890 	.word	0x00001890
    1104:	20000008 	.word	0x20000008
    1108:	00001890 	.word	0x00001890
    110c:	00000000 	.word	0x00000000

00001110 <main>:

#include "asf.h"

int main(void)
{
    1110:	b508      	push	{r3, lr}
  system_init();
    1112:	f000 fadf 	bl	16d4 <system_init>
}
    1116:	2000      	movs	r0, #0
    1118:	bd08      	pop	{r3, pc}
    111a:	46c0      	nop			; (mov r8, r8)

0000111c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    111c:	4b0c      	ldr	r3, [pc, #48]	; (1150 <cpu_irq_enter_critical+0x34>)
    111e:	681b      	ldr	r3, [r3, #0]
    1120:	2b00      	cmp	r3, #0
    1122:	d110      	bne.n	1146 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1128:	2b00      	cmp	r3, #0
    112a:	d109      	bne.n	1140 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    112c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    112e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1132:	2200      	movs	r2, #0
    1134:	4b07      	ldr	r3, [pc, #28]	; (1154 <cpu_irq_enter_critical+0x38>)
    1136:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1138:	3201      	adds	r2, #1
    113a:	4b07      	ldr	r3, [pc, #28]	; (1158 <cpu_irq_enter_critical+0x3c>)
    113c:	701a      	strb	r2, [r3, #0]
    113e:	e002      	b.n	1146 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1140:	2200      	movs	r2, #0
    1142:	4b05      	ldr	r3, [pc, #20]	; (1158 <cpu_irq_enter_critical+0x3c>)
    1144:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1146:	4a02      	ldr	r2, [pc, #8]	; (1150 <cpu_irq_enter_critical+0x34>)
    1148:	6813      	ldr	r3, [r2, #0]
    114a:	3301      	adds	r3, #1
    114c:	6013      	str	r3, [r2, #0]
}
    114e:	4770      	bx	lr
    1150:	20000020 	.word	0x20000020
    1154:	20000000 	.word	0x20000000
    1158:	20000024 	.word	0x20000024

0000115c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    115c:	4b08      	ldr	r3, [pc, #32]	; (1180 <cpu_irq_leave_critical+0x24>)
    115e:	681a      	ldr	r2, [r3, #0]
    1160:	3a01      	subs	r2, #1
    1162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	2b00      	cmp	r3, #0
    1168:	d109      	bne.n	117e <cpu_irq_leave_critical+0x22>
    116a:	4b06      	ldr	r3, [pc, #24]	; (1184 <cpu_irq_leave_critical+0x28>)
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	2b00      	cmp	r3, #0
    1170:	d005      	beq.n	117e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1172:	2201      	movs	r2, #1
    1174:	4b04      	ldr	r3, [pc, #16]	; (1188 <cpu_irq_leave_critical+0x2c>)
    1176:	701a      	strb	r2, [r3, #0]
    1178:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    117c:	b662      	cpsie	i
	}
}
    117e:	4770      	bx	lr
    1180:	20000020 	.word	0x20000020
    1184:	20000024 	.word	0x20000024
    1188:	20000000 	.word	0x20000000

0000118c <system_board_init>:




void system_board_init(void)
{
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1190:	ac01      	add	r4, sp, #4
    1192:	2501      	movs	r5, #1
    1194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1196:	2600      	movs	r6, #0
    1198:	70a6      	strb	r6, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    119a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    119c:	2013      	movs	r0, #19
    119e:	1c21      	adds	r1, r4, #0
    11a0:	f000 f87e 	bl	12a0 <port_pin_set_config>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    11a4:	2280      	movs	r2, #128	; 0x80
    11a6:	0312      	lsls	r2, r2, #12
    11a8:	4b04      	ldr	r3, [pc, #16]	; (11bc <system_board_init+0x30>)
    11aa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    11ac:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    11ae:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    11b0:	201c      	movs	r0, #28
    11b2:	1c21      	adds	r1, r4, #0
    11b4:	f000 f874 	bl	12a0 <port_pin_set_config>
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    11b8:	b002      	add	sp, #8
    11ba:	bd70      	pop	{r4, r5, r6, pc}
    11bc:	41004400 	.word	0x41004400

000011c0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    11c0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    11c2:	2200      	movs	r2, #0
    11c4:	4b15      	ldr	r3, [pc, #84]	; (121c <EIC_Handler+0x5c>)
    11c6:	701a      	strb	r2, [r3, #0]
    11c8:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    11ca:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    11cc:	4e14      	ldr	r6, [pc, #80]	; (1220 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    11ce:	4c13      	ldr	r4, [pc, #76]	; (121c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    11d0:	2b1f      	cmp	r3, #31
    11d2:	d919      	bls.n	1208 <EIC_Handler+0x48>
    11d4:	e00f      	b.n	11f6 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    11d6:	2100      	movs	r1, #0
    11d8:	e000      	b.n	11dc <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    11da:	4912      	ldr	r1, [pc, #72]	; (1224 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    11dc:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    11de:	009b      	lsls	r3, r3, #2
    11e0:	599b      	ldr	r3, [r3, r6]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d000      	beq.n	11e8 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    11e6:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    11e8:	7823      	ldrb	r3, [r4, #0]
    11ea:	3301      	adds	r3, #1
    11ec:	b2db      	uxtb	r3, r3
    11ee:	7023      	strb	r3, [r4, #0]
    11f0:	2b0f      	cmp	r3, #15
    11f2:	d9ed      	bls.n	11d0 <EIC_Handler+0x10>
    11f4:	e011      	b.n	121a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    11f6:	1c29      	adds	r1, r5, #0
    11f8:	4019      	ands	r1, r3
    11fa:	2201      	movs	r2, #1
    11fc:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    11fe:	2100      	movs	r1, #0
    1200:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1202:	4211      	tst	r1, r2
    1204:	d1e7      	bne.n	11d6 <EIC_Handler+0x16>
    1206:	e7ef      	b.n	11e8 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1208:	1c29      	adds	r1, r5, #0
    120a:	4019      	ands	r1, r3
    120c:	2201      	movs	r2, #1
    120e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    1210:	4904      	ldr	r1, [pc, #16]	; (1224 <EIC_Handler+0x64>)
    1212:	6909      	ldr	r1, [r1, #16]
    1214:	4211      	tst	r1, r2
    1216:	d1e0      	bne.n	11da <EIC_Handler+0x1a>
    1218:	e7e6      	b.n	11e8 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    121a:	bd70      	pop	{r4, r5, r6, pc}
    121c:	20000058 	.word	0x20000058
    1220:	2000005c 	.word	0x2000005c
    1224:	40001800 	.word	0x40001800

00001228 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1228:	4a04      	ldr	r2, [pc, #16]	; (123c <_extint_enable+0x14>)
    122a:	7811      	ldrb	r1, [r2, #0]
    122c:	2302      	movs	r3, #2
    122e:	430b      	orrs	r3, r1
    1230:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1232:	7853      	ldrb	r3, [r2, #1]
    1234:	b25b      	sxtb	r3, r3
    1236:	2b00      	cmp	r3, #0
    1238:	dbfb      	blt.n	1232 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    123a:	4770      	bx	lr
    123c:	40001800 	.word	0x40001800

00001240 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1240:	b500      	push	{lr}
    1242:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1244:	4a12      	ldr	r2, [pc, #72]	; (1290 <_system_extint_init+0x50>)
    1246:	6991      	ldr	r1, [r2, #24]
    1248:	2340      	movs	r3, #64	; 0x40
    124a:	430b      	orrs	r3, r1
    124c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    124e:	a901      	add	r1, sp, #4
    1250:	2300      	movs	r3, #0
    1252:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1254:	2005      	movs	r0, #5
    1256:	f000 f9c5 	bl	15e4 <system_gclk_chan_set_config>

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    125a:	2005      	movs	r0, #5
    125c:	f000 f984 	bl	1568 <system_gclk_chan_enable>

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1260:	4a0c      	ldr	r2, [pc, #48]	; (1294 <_system_extint_init+0x54>)
    1262:	7811      	ldrb	r1, [r2, #0]
    1264:	2301      	movs	r3, #1
    1266:	430b      	orrs	r3, r1
    1268:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    126a:	7853      	ldrb	r3, [r2, #1]
    126c:	b25b      	sxtb	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	dbfb      	blt.n	126a <_system_extint_init+0x2a>
    1272:	4b09      	ldr	r3, [pc, #36]	; (1298 <_system_extint_init+0x58>)
    1274:	1c19      	adds	r1, r3, #0
    1276:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    1278:	2200      	movs	r2, #0
    127a:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    127c:	428b      	cmp	r3, r1
    127e:	d1fc      	bne.n	127a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1280:	2210      	movs	r2, #16
    1282:	4b06      	ldr	r3, [pc, #24]	; (129c <_system_extint_init+0x5c>)
    1284:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1286:	f7ff ffcf 	bl	1228 <_extint_enable>
}
    128a:	b003      	add	sp, #12
    128c:	bd00      	pop	{pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	40000400 	.word	0x40000400
    1294:	40001800 	.word	0x40001800
    1298:	2000005c 	.word	0x2000005c
    129c:	e000e100 	.word	0xe000e100

000012a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    12a0:	b500      	push	{lr}
    12a2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12a4:	ab01      	add	r3, sp, #4
    12a6:	2280      	movs	r2, #128	; 0x80
    12a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    12aa:	780a      	ldrb	r2, [r1, #0]
    12ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    12ae:	784a      	ldrb	r2, [r1, #1]
    12b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    12b2:	788a      	ldrb	r2, [r1, #2]
    12b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    12b6:	1c19      	adds	r1, r3, #0
    12b8:	f000 f9f4 	bl	16a4 <system_pinmux_pin_set_config>
}
    12bc:	b003      	add	sp, #12
    12be:	bd00      	pop	{pc}

000012c0 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    12c0:	b508      	push	{r3, lr}
    12c2:	4b02      	ldr	r3, [pc, #8]	; (12cc <SERCOM0_Handler+0xc>)
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	2000      	movs	r0, #0
    12c8:	4798      	blx	r3
    12ca:	bd08      	pop	{r3, pc}
    12cc:	20000028 	.word	0x20000028

000012d0 <SERCOM1_Handler>:
    12d0:	b508      	push	{r3, lr}
    12d2:	4b02      	ldr	r3, [pc, #8]	; (12dc <SERCOM1_Handler+0xc>)
    12d4:	685b      	ldr	r3, [r3, #4]
    12d6:	2001      	movs	r0, #1
    12d8:	4798      	blx	r3
    12da:	bd08      	pop	{r3, pc}
    12dc:	20000028 	.word	0x20000028

000012e0 <SERCOM2_Handler>:
    12e0:	b508      	push	{r3, lr}
    12e2:	4b02      	ldr	r3, [pc, #8]	; (12ec <SERCOM2_Handler+0xc>)
    12e4:	689b      	ldr	r3, [r3, #8]
    12e6:	2002      	movs	r0, #2
    12e8:	4798      	blx	r3
    12ea:	bd08      	pop	{r3, pc}
    12ec:	20000028 	.word	0x20000028

000012f0 <SERCOM3_Handler>:
    12f0:	b508      	push	{r3, lr}
    12f2:	4b02      	ldr	r3, [pc, #8]	; (12fc <SERCOM3_Handler+0xc>)
    12f4:	68db      	ldr	r3, [r3, #12]
    12f6:	2003      	movs	r0, #3
    12f8:	4798      	blx	r3
    12fa:	bd08      	pop	{r3, pc}
    12fc:	20000028 	.word	0x20000028

00001300 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1300:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1302:	4c0c      	ldr	r4, [pc, #48]	; (1334 <system_clock_source_osc8m_set_config+0x34>)
    1304:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1306:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1308:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    130a:	7842      	ldrb	r2, [r0, #1]
    130c:	2001      	movs	r0, #1
    130e:	4002      	ands	r2, r0
    1310:	0192      	lsls	r2, r2, #6
    1312:	2640      	movs	r6, #64	; 0x40
    1314:	43b3      	bics	r3, r6
    1316:	4313      	orrs	r3, r2
    1318:	1c02      	adds	r2, r0, #0
    131a:	402a      	ands	r2, r5
    131c:	01d2      	lsls	r2, r2, #7
    131e:	307f      	adds	r0, #127	; 0x7f
    1320:	4383      	bics	r3, r0
    1322:	4313      	orrs	r3, r2
    1324:	2203      	movs	r2, #3
    1326:	400a      	ands	r2, r1
    1328:	0212      	lsls	r2, r2, #8
    132a:	4903      	ldr	r1, [pc, #12]	; (1338 <system_clock_source_osc8m_set_config+0x38>)
    132c:	400b      	ands	r3, r1
    132e:	4313      	orrs	r3, r2
    1330:	6223      	str	r3, [r4, #32]
}
    1332:	bd70      	pop	{r4, r5, r6, pc}
    1334:	40000800 	.word	0x40000800
    1338:	fffffcff 	.word	0xfffffcff

0000133c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    133c:	2808      	cmp	r0, #8
    133e:	d803      	bhi.n	1348 <system_clock_source_enable+0xc>
    1340:	0080      	lsls	r0, r0, #2
    1342:	4b22      	ldr	r3, [pc, #136]	; (13cc <system_clock_source_enable+0x90>)
    1344:	581b      	ldr	r3, [r3, r0]
    1346:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1348:	2017      	movs	r0, #23
    134a:	e03e      	b.n	13ca <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    134c:	4a20      	ldr	r2, [pc, #128]	; (13d0 <system_clock_source_enable+0x94>)
    134e:	6a11      	ldr	r1, [r2, #32]
    1350:	2302      	movs	r3, #2
    1352:	430b      	orrs	r3, r1
    1354:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1356:	2000      	movs	r0, #0
    1358:	e037      	b.n	13ca <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    135a:	4a1d      	ldr	r2, [pc, #116]	; (13d0 <system_clock_source_enable+0x94>)
    135c:	6991      	ldr	r1, [r2, #24]
    135e:	2302      	movs	r3, #2
    1360:	430b      	orrs	r3, r1
    1362:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1364:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1366:	e030      	b.n	13ca <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1368:	4a19      	ldr	r2, [pc, #100]	; (13d0 <system_clock_source_enable+0x94>)
    136a:	8a11      	ldrh	r1, [r2, #16]
    136c:	2302      	movs	r3, #2
    136e:	430b      	orrs	r3, r1
    1370:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1372:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1374:	e029      	b.n	13ca <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1376:	4a16      	ldr	r2, [pc, #88]	; (13d0 <system_clock_source_enable+0x94>)
    1378:	8a91      	ldrh	r1, [r2, #20]
    137a:	2302      	movs	r3, #2
    137c:	430b      	orrs	r3, r1
    137e:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1380:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1382:	e022      	b.n	13ca <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1384:	4b13      	ldr	r3, [pc, #76]	; (13d4 <system_clock_source_enable+0x98>)
    1386:	6819      	ldr	r1, [r3, #0]
    1388:	2202      	movs	r2, #2
    138a:	430a      	orrs	r2, r1
    138c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    138e:	681a      	ldr	r2, [r3, #0]
    1390:	4b11      	ldr	r3, [pc, #68]	; (13d8 <system_clock_source_enable+0x9c>)
    1392:	4013      	ands	r3, r2
    1394:	4a0e      	ldr	r2, [pc, #56]	; (13d0 <system_clock_source_enable+0x94>)
    1396:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1398:	1c11      	adds	r1, r2, #0
    139a:	2210      	movs	r2, #16
    139c:	68cb      	ldr	r3, [r1, #12]
    139e:	421a      	tst	r2, r3
    13a0:	d0fc      	beq.n	139c <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    13a2:	4a0c      	ldr	r2, [pc, #48]	; (13d4 <system_clock_source_enable+0x98>)
    13a4:	6891      	ldr	r1, [r2, #8]
    13a6:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <system_clock_source_enable+0x94>)
    13a8:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    13aa:	6851      	ldr	r1, [r2, #4]
    13ac:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13ae:	6812      	ldr	r2, [r2, #0]
    13b0:	b292      	uxth	r2, r2
    13b2:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13b4:	2000      	movs	r0, #0
    13b6:	e008      	b.n	13ca <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13b8:	4905      	ldr	r1, [pc, #20]	; (13d0 <system_clock_source_enable+0x94>)
    13ba:	2244      	movs	r2, #68	; 0x44
    13bc:	5c88      	ldrb	r0, [r1, r2]
    13be:	2302      	movs	r3, #2
    13c0:	4303      	orrs	r3, r0
    13c2:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13c4:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    13c6:	e000      	b.n	13ca <system_clock_source_enable+0x8e>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    13c8:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    13ca:	4770      	bx	lr
    13cc:	0000184c 	.word	0x0000184c
    13d0:	40000800 	.word	0x40000800
    13d4:	20000040 	.word	0x20000040
    13d8:	0000ff7f 	.word	0x0000ff7f

000013dc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13dc:	b530      	push	{r4, r5, lr}
    13de:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13e0:	22c2      	movs	r2, #194	; 0xc2
    13e2:	00d2      	lsls	r2, r2, #3
    13e4:	4b19      	ldr	r3, [pc, #100]	; (144c <system_clock_init+0x70>)
    13e6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13e8:	4a19      	ldr	r2, [pc, #100]	; (1450 <system_clock_init+0x74>)
    13ea:	6853      	ldr	r3, [r2, #4]
    13ec:	211e      	movs	r1, #30
    13ee:	438b      	bics	r3, r1
    13f0:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    13f2:	2301      	movs	r3, #1
    13f4:	466a      	mov	r2, sp
    13f6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13f8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13fa:	b2e0      	uxtb	r0, r4
    13fc:	4669      	mov	r1, sp
    13fe:	f000 f8f1 	bl	15e4 <system_gclk_chan_set_config>
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1402:	3401      	adds	r4, #1
    1404:	2c25      	cmp	r4, #37	; 0x25
    1406:	d1f8      	bne.n	13fa <system_clock_init+0x1e>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1408:	a803      	add	r0, sp, #12
    140a:	2400      	movs	r4, #0
    140c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    140e:	2501      	movs	r5, #1
    1410:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1412:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1414:	f7ff ff74 	bl	1300 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1418:	2006      	movs	r0, #6
    141a:	f7ff ff8f 	bl	133c <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    141e:	f000 f81b 	bl	1458 <system_gclk_init>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1422:	4b0c      	ldr	r3, [pc, #48]	; (1454 <system_clock_init+0x78>)
    1424:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1426:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1428:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    142a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    142c:	466b      	mov	r3, sp
    142e:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1430:	2306      	movs	r3, #6
    1432:	466a      	mov	r2, sp
    1434:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1436:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1438:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    143a:	2000      	movs	r0, #0
    143c:	4669      	mov	r1, sp
    143e:	f000 f81d 	bl	147c <system_gclk_gen_set_config>
    1442:	2000      	movs	r0, #0
    1444:	f000 f872 	bl	152c <system_gclk_gen_enable>
#endif
}
    1448:	b005      	add	sp, #20
    144a:	bd30      	pop	{r4, r5, pc}
    144c:	40000800 	.word	0x40000800
    1450:	41004000 	.word	0x41004000
    1454:	40000400 	.word	0x40000400

00001458 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1458:	4a06      	ldr	r2, [pc, #24]	; (1474 <system_gclk_init+0x1c>)
    145a:	6991      	ldr	r1, [r2, #24]
    145c:	2308      	movs	r3, #8
    145e:	430b      	orrs	r3, r1
    1460:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1462:	2201      	movs	r2, #1
    1464:	4b04      	ldr	r3, [pc, #16]	; (1478 <system_gclk_init+0x20>)
    1466:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1468:	1c19      	adds	r1, r3, #0
    146a:	780b      	ldrb	r3, [r1, #0]
    146c:	4213      	tst	r3, r2
    146e:	d1fc      	bne.n	146a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1470:	4770      	bx	lr
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	40000400 	.word	0x40000400
    1478:	40000c00 	.word	0x40000c00

0000147c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    147c:	b570      	push	{r4, r5, r6, lr}
    147e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1480:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1482:	780d      	ldrb	r5, [r1, #0]
    1484:	022d      	lsls	r5, r5, #8
    1486:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1488:	784b      	ldrb	r3, [r1, #1]
    148a:	2b00      	cmp	r3, #0
    148c:	d002      	beq.n	1494 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    148e:	2380      	movs	r3, #128	; 0x80
    1490:	02db      	lsls	r3, r3, #11
    1492:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1494:	7a4b      	ldrb	r3, [r1, #9]
    1496:	2b00      	cmp	r3, #0
    1498:	d002      	beq.n	14a0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    149a:	2380      	movs	r3, #128	; 0x80
    149c:	031b      	lsls	r3, r3, #12
    149e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    14a0:	6848      	ldr	r0, [r1, #4]
    14a2:	2801      	cmp	r0, #1
    14a4:	d918      	bls.n	14d8 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    14a6:	1e43      	subs	r3, r0, #1
    14a8:	4218      	tst	r0, r3
    14aa:	d110      	bne.n	14ce <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    14ac:	2802      	cmp	r0, #2
    14ae:	d906      	bls.n	14be <system_gclk_gen_set_config+0x42>
    14b0:	2302      	movs	r3, #2
    14b2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    14b4:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    14b6:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    14b8:	4298      	cmp	r0, r3
    14ba:	d8fb      	bhi.n	14b4 <system_gclk_gen_set_config+0x38>
    14bc:	e000      	b.n	14c0 <system_gclk_gen_set_config+0x44>
    14be:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    14c0:	0212      	lsls	r2, r2, #8
    14c2:	4332      	orrs	r2, r6
    14c4:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    14c6:	2380      	movs	r3, #128	; 0x80
    14c8:	035b      	lsls	r3, r3, #13
    14ca:	431d      	orrs	r5, r3
    14cc:	e004      	b.n	14d8 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    14ce:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    14d0:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    14d2:	2380      	movs	r3, #128	; 0x80
    14d4:	029b      	lsls	r3, r3, #10
    14d6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    14d8:	7a0b      	ldrb	r3, [r1, #8]
    14da:	2b00      	cmp	r3, #0
    14dc:	d002      	beq.n	14e4 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	039b      	lsls	r3, r3, #14
    14e2:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14e4:	4a0f      	ldr	r2, [pc, #60]	; (1524 <system_gclk_gen_set_config+0xa8>)
    14e6:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    14e8:	b25b      	sxtb	r3, r3
    14ea:	2b00      	cmp	r3, #0
    14ec:	dbfb      	blt.n	14e6 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14ee:	f7ff fe15 	bl	111c <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14f2:	4b0d      	ldr	r3, [pc, #52]	; (1528 <system_gclk_gen_set_config+0xac>)
    14f4:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14f6:	4a0b      	ldr	r2, [pc, #44]	; (1524 <system_gclk_gen_set_config+0xa8>)
    14f8:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    14fa:	b25b      	sxtb	r3, r3
    14fc:	2b00      	cmp	r3, #0
    14fe:	dbfb      	blt.n	14f8 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1500:	4b08      	ldr	r3, [pc, #32]	; (1524 <system_gclk_gen_set_config+0xa8>)
    1502:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1504:	1c1a      	adds	r2, r3, #0
    1506:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1508:	b25b      	sxtb	r3, r3
    150a:	2b00      	cmp	r3, #0
    150c:	dbfb      	blt.n	1506 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    150e:	4a05      	ldr	r2, [pc, #20]	; (1524 <system_gclk_gen_set_config+0xa8>)
    1510:	6851      	ldr	r1, [r2, #4]
    1512:	2380      	movs	r3, #128	; 0x80
    1514:	025b      	lsls	r3, r3, #9
    1516:	400b      	ands	r3, r1
    1518:	431d      	orrs	r5, r3
    151a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    151c:	f7ff fe1e 	bl	115c <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1520:	bd70      	pop	{r4, r5, r6, pc}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	40000c00 	.word	0x40000c00
    1528:	40000c08 	.word	0x40000c08

0000152c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    152c:	b510      	push	{r4, lr}
    152e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1530:	4a0b      	ldr	r2, [pc, #44]	; (1560 <system_gclk_gen_enable+0x34>)
    1532:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1534:	b25b      	sxtb	r3, r3
    1536:	2b00      	cmp	r3, #0
    1538:	dbfb      	blt.n	1532 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    153a:	f7ff fdef 	bl	111c <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    153e:	4b09      	ldr	r3, [pc, #36]	; (1564 <system_gclk_gen_enable+0x38>)
    1540:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1542:	4a07      	ldr	r2, [pc, #28]	; (1560 <system_gclk_gen_enable+0x34>)
    1544:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1546:	b25b      	sxtb	r3, r3
    1548:	2b00      	cmp	r3, #0
    154a:	dbfb      	blt.n	1544 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    154c:	4a04      	ldr	r2, [pc, #16]	; (1560 <system_gclk_gen_enable+0x34>)
    154e:	6853      	ldr	r3, [r2, #4]
    1550:	2180      	movs	r1, #128	; 0x80
    1552:	0249      	lsls	r1, r1, #9
    1554:	430b      	orrs	r3, r1
    1556:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1558:	f7ff fe00 	bl	115c <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    155c:	bd10      	pop	{r4, pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	40000c00 	.word	0x40000c00
    1564:	40000c04 	.word	0x40000c04

00001568 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1568:	b510      	push	{r4, lr}
    156a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    156c:	f7ff fdd6 	bl	111c <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1570:	4b05      	ldr	r3, [pc, #20]	; (1588 <system_gclk_chan_enable+0x20>)
    1572:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1574:	4a05      	ldr	r2, [pc, #20]	; (158c <system_gclk_chan_enable+0x24>)
    1576:	8851      	ldrh	r1, [r2, #2]
    1578:	2380      	movs	r3, #128	; 0x80
    157a:	01db      	lsls	r3, r3, #7
    157c:	430b      	orrs	r3, r1
    157e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1580:	f7ff fdec 	bl	115c <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1584:	bd10      	pop	{r4, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	40000c02 	.word	0x40000c02
    158c:	40000c00 	.word	0x40000c00

00001590 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1590:	b510      	push	{r4, lr}
    1592:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1594:	f7ff fdc2 	bl	111c <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1598:	4b0e      	ldr	r3, [pc, #56]	; (15d4 <system_gclk_chan_disable+0x44>)
    159a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    159c:	4b0e      	ldr	r3, [pc, #56]	; (15d8 <system_gclk_chan_disable+0x48>)
    159e:	885a      	ldrh	r2, [r3, #2]
    15a0:	0512      	lsls	r2, r2, #20
    15a2:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    15a4:	8859      	ldrh	r1, [r3, #2]
    15a6:	4a0d      	ldr	r2, [pc, #52]	; (15dc <system_gclk_chan_disable+0x4c>)
    15a8:	400a      	ands	r2, r1
    15aa:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    15ac:	8859      	ldrh	r1, [r3, #2]
    15ae:	4a0c      	ldr	r2, [pc, #48]	; (15e0 <system_gclk_chan_disable+0x50>)
    15b0:	400a      	ands	r2, r1
    15b2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    15b4:	1c19      	adds	r1, r3, #0
    15b6:	2280      	movs	r2, #128	; 0x80
    15b8:	01d2      	lsls	r2, r2, #7
    15ba:	884b      	ldrh	r3, [r1, #2]
    15bc:	4213      	tst	r3, r2
    15be:	d1fc      	bne.n	15ba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    15c0:	4905      	ldr	r1, [pc, #20]	; (15d8 <system_gclk_chan_disable+0x48>)
    15c2:	0202      	lsls	r2, r0, #8
    15c4:	8848      	ldrh	r0, [r1, #2]
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <system_gclk_chan_disable+0x4c>)
    15c8:	4003      	ands	r3, r0
    15ca:	4313      	orrs	r3, r2
    15cc:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15ce:	f7ff fdc5 	bl	115c <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    15d2:	bd10      	pop	{r4, pc}
    15d4:	40000c02 	.word	0x40000c02
    15d8:	40000c00 	.word	0x40000c00
    15dc:	fffff0ff 	.word	0xfffff0ff
    15e0:	ffffbfff 	.word	0xffffbfff

000015e4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    15e4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    15e6:	780c      	ldrb	r4, [r1, #0]
    15e8:	0224      	lsls	r4, r4, #8
    15ea:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    15ec:	f7ff ffd0 	bl	1590 <system_gclk_chan_disable>

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    15f0:	b2a4      	uxth	r4, r4
    15f2:	4b01      	ldr	r3, [pc, #4]	; (15f8 <system_gclk_chan_set_config+0x14>)
    15f4:	805c      	strh	r4, [r3, #2]
}
    15f6:	bd10      	pop	{r4, pc}
    15f8:	40000c00 	.word	0x40000c00

000015fc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    15fc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15fe:	78d3      	ldrb	r3, [r2, #3]
    1600:	2b00      	cmp	r3, #0
    1602:	d11e      	bne.n	1642 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1604:	7814      	ldrb	r4, [r2, #0]
    1606:	2c80      	cmp	r4, #128	; 0x80
    1608:	d004      	beq.n	1614 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    160a:	0624      	lsls	r4, r4, #24
    160c:	2380      	movs	r3, #128	; 0x80
    160e:	025b      	lsls	r3, r3, #9
    1610:	431c      	orrs	r4, r3
    1612:	e000      	b.n	1616 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1614:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1616:	7853      	ldrb	r3, [r2, #1]
    1618:	2502      	movs	r5, #2
    161a:	43ab      	bics	r3, r5
    161c:	d10a      	bne.n	1634 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    161e:	7893      	ldrb	r3, [r2, #2]
    1620:	2b00      	cmp	r3, #0
    1622:	d103      	bne.n	162c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1624:	2380      	movs	r3, #128	; 0x80
    1626:	029b      	lsls	r3, r3, #10
    1628:	431c      	orrs	r4, r3
    162a:	e002      	b.n	1632 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    162c:	23c0      	movs	r3, #192	; 0xc0
    162e:	02db      	lsls	r3, r3, #11
    1630:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1632:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1634:	7853      	ldrb	r3, [r2, #1]
    1636:	3b01      	subs	r3, #1
    1638:	2b01      	cmp	r3, #1
    163a:	d812      	bhi.n	1662 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    163c:	4b18      	ldr	r3, [pc, #96]	; (16a0 <_system_pinmux_config+0xa4>)
    163e:	401c      	ands	r4, r3
    1640:	e00f      	b.n	1662 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1642:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1644:	040b      	lsls	r3, r1, #16
    1646:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1648:	24a0      	movs	r4, #160	; 0xa0
    164a:	05e4      	lsls	r4, r4, #23
    164c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    164e:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1650:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1652:	24d0      	movs	r4, #208	; 0xd0
    1654:	0624      	lsls	r4, r4, #24
    1656:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1658:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    165a:	78d3      	ldrb	r3, [r2, #3]
    165c:	2b00      	cmp	r3, #0
    165e:	d018      	beq.n	1692 <_system_pinmux_config+0x96>
    1660:	e01c      	b.n	169c <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1662:	040b      	lsls	r3, r1, #16
    1664:	0c1b      	lsrs	r3, r3, #16
    1666:	25a0      	movs	r5, #160	; 0xa0
    1668:	05ed      	lsls	r5, r5, #23
    166a:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    166c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    166e:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1670:	0c0b      	lsrs	r3, r1, #16
    1672:	25d0      	movs	r5, #208	; 0xd0
    1674:	062d      	lsls	r5, r5, #24
    1676:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1678:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    167a:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    167c:	78d3      	ldrb	r3, [r2, #3]
    167e:	2b00      	cmp	r3, #0
    1680:	d10c      	bne.n	169c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1682:	0363      	lsls	r3, r4, #13
    1684:	d505      	bpl.n	1692 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1686:	7893      	ldrb	r3, [r2, #2]
    1688:	2b01      	cmp	r3, #1
    168a:	d101      	bne.n	1690 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    168c:	6181      	str	r1, [r0, #24]
    168e:	e000      	b.n	1692 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1690:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1692:	7853      	ldrb	r3, [r2, #1]
    1694:	3b01      	subs	r3, #1
    1696:	2b01      	cmp	r3, #1
    1698:	d800      	bhi.n	169c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    169a:	6081      	str	r1, [r0, #8]
		}
	}
}
    169c:	bd30      	pop	{r4, r5, pc}
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	fffbffff 	.word	0xfffbffff

000016a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    16a4:	b508      	push	{r3, lr}
    16a6:	1c03      	adds	r3, r0, #0
    16a8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16aa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    16ac:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16ae:	2900      	cmp	r1, #0
    16b0:	d104      	bne.n	16bc <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    16b2:	0958      	lsrs	r0, r3, #5
    16b4:	01c0      	lsls	r0, r0, #7
    16b6:	4905      	ldr	r1, [pc, #20]	; (16cc <system_pinmux_pin_set_config+0x28>)
    16b8:	468c      	mov	ip, r1
    16ba:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    16bc:	211f      	movs	r1, #31
    16be:	400b      	ands	r3, r1
    16c0:	391e      	subs	r1, #30
    16c2:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    16c4:	f7ff ff9a 	bl	15fc <_system_pinmux_config>
}
    16c8:	bd08      	pop	{r3, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	41004400 	.word	0x41004400

000016d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    16d0:	4770      	bx	lr
    16d2:	46c0      	nop			; (mov r8, r8)

000016d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    16d4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    16d6:	f7ff fe81 	bl	13dc <system_clock_init>

	/* Initialize board hardware */
	system_board_init();
    16da:	f7ff fd57 	bl	118c <system_board_init>

	/* Initialize EVSYS hardware */
	_system_events_init();
    16de:	f7ff fff7 	bl	16d0 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    16e2:	f7ff fdad 	bl	1240 <_system_extint_init>
}
    16e6:	bd08      	pop	{r3, pc}

000016e8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    16e8:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    16ea:	0080      	lsls	r0, r0, #2
    16ec:	4b14      	ldr	r3, [pc, #80]	; (1740 <_tc_interrupt_handler+0x58>)
    16ee:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    16f0:	682b      	ldr	r3, [r5, #0]
    16f2:	7b9c      	ldrb	r4, [r3, #14]
    16f4:	7e2b      	ldrb	r3, [r5, #24]
    16f6:	401c      	ands	r4, r3
    16f8:	7e6b      	ldrb	r3, [r5, #25]
    16fa:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    16fc:	07e3      	lsls	r3, r4, #31
    16fe:	d505      	bpl.n	170c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1700:	1c28      	adds	r0, r5, #0
    1702:	68ab      	ldr	r3, [r5, #8]
    1704:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1706:	2301      	movs	r3, #1
    1708:	682a      	ldr	r2, [r5, #0]
    170a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    170c:	07a3      	lsls	r3, r4, #30
    170e:	d505      	bpl.n	171c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1710:	1c28      	adds	r0, r5, #0
    1712:	68eb      	ldr	r3, [r5, #12]
    1714:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1716:	2302      	movs	r3, #2
    1718:	682a      	ldr	r2, [r5, #0]
    171a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    171c:	06e3      	lsls	r3, r4, #27
    171e:	d505      	bpl.n	172c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1720:	1c28      	adds	r0, r5, #0
    1722:	692b      	ldr	r3, [r5, #16]
    1724:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1726:	2310      	movs	r3, #16
    1728:	682a      	ldr	r2, [r5, #0]
    172a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    172c:	06a3      	lsls	r3, r4, #26
    172e:	d505      	bpl.n	173c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1730:	1c28      	adds	r0, r5, #0
    1732:	696b      	ldr	r3, [r5, #20]
    1734:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1736:	682b      	ldr	r3, [r5, #0]
    1738:	2220      	movs	r2, #32
    173a:	739a      	strb	r2, [r3, #14]
	}
}
    173c:	bd38      	pop	{r3, r4, r5, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	2000009c 	.word	0x2000009c

00001744 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1744:	b508      	push	{r3, lr}
    1746:	2000      	movs	r0, #0
    1748:	f7ff ffce 	bl	16e8 <_tc_interrupt_handler>
    174c:	bd08      	pop	{r3, pc}
    174e:	46c0      	nop			; (mov r8, r8)

00001750 <TC4_Handler>:
    1750:	b508      	push	{r3, lr}
    1752:	2001      	movs	r0, #1
    1754:	f7ff ffc8 	bl	16e8 <_tc_interrupt_handler>
    1758:	bd08      	pop	{r3, pc}
    175a:	46c0      	nop			; (mov r8, r8)

0000175c <TC5_Handler>:
    175c:	b508      	push	{r3, lr}
    175e:	2002      	movs	r0, #2
    1760:	f7ff ffc2 	bl	16e8 <_tc_interrupt_handler>
    1764:	bd08      	pop	{r3, pc}
    1766:	46c0      	nop			; (mov r8, r8)

00001768 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1768:	e7fe      	b.n	1768 <Dummy_Handler>
    176a:	46c0      	nop			; (mov r8, r8)

0000176c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    176c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    176e:	4b1b      	ldr	r3, [pc, #108]	; (17dc <Reset_Handler+0x70>)
    1770:	4a1b      	ldr	r2, [pc, #108]	; (17e0 <Reset_Handler+0x74>)
    1772:	429a      	cmp	r2, r3
    1774:	d003      	beq.n	177e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1776:	4b1b      	ldr	r3, [pc, #108]	; (17e4 <Reset_Handler+0x78>)
    1778:	4a18      	ldr	r2, [pc, #96]	; (17dc <Reset_Handler+0x70>)
    177a:	429a      	cmp	r2, r3
    177c:	d304      	bcc.n	1788 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    177e:	4b1a      	ldr	r3, [pc, #104]	; (17e8 <Reset_Handler+0x7c>)
    1780:	4a1a      	ldr	r2, [pc, #104]	; (17ec <Reset_Handler+0x80>)
    1782:	429a      	cmp	r2, r3
    1784:	d310      	bcc.n	17a8 <Reset_Handler+0x3c>
    1786:	e01e      	b.n	17c6 <Reset_Handler+0x5a>
    1788:	4a19      	ldr	r2, [pc, #100]	; (17f0 <Reset_Handler+0x84>)
    178a:	4b16      	ldr	r3, [pc, #88]	; (17e4 <Reset_Handler+0x78>)
    178c:	3303      	adds	r3, #3
    178e:	1a9b      	subs	r3, r3, r2
    1790:	089b      	lsrs	r3, r3, #2
    1792:	3301      	adds	r3, #1
    1794:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1796:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1798:	4810      	ldr	r0, [pc, #64]	; (17dc <Reset_Handler+0x70>)
    179a:	4911      	ldr	r1, [pc, #68]	; (17e0 <Reset_Handler+0x74>)
    179c:	588c      	ldr	r4, [r1, r2]
    179e:	5084      	str	r4, [r0, r2]
    17a0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    17a2:	429a      	cmp	r2, r3
    17a4:	d1fa      	bne.n	179c <Reset_Handler+0x30>
    17a6:	e7ea      	b.n	177e <Reset_Handler+0x12>
    17a8:	4a12      	ldr	r2, [pc, #72]	; (17f4 <Reset_Handler+0x88>)
    17aa:	4b0f      	ldr	r3, [pc, #60]	; (17e8 <Reset_Handler+0x7c>)
    17ac:	3303      	adds	r3, #3
    17ae:	1a9b      	subs	r3, r3, r2
    17b0:	089b      	lsrs	r3, r3, #2
    17b2:	3301      	adds	r3, #1
    17b4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    17b6:	2200      	movs	r2, #0
                *pDest++ = 0;
    17b8:	480c      	ldr	r0, [pc, #48]	; (17ec <Reset_Handler+0x80>)
    17ba:	2100      	movs	r1, #0
    17bc:	1814      	adds	r4, r2, r0
    17be:	6021      	str	r1, [r4, #0]
    17c0:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    17c2:	429a      	cmp	r2, r3
    17c4:	d1fa      	bne.n	17bc <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    17c6:	4a0c      	ldr	r2, [pc, #48]	; (17f8 <Reset_Handler+0x8c>)
    17c8:	217f      	movs	r1, #127	; 0x7f
    17ca:	4b0c      	ldr	r3, [pc, #48]	; (17fc <Reset_Handler+0x90>)
    17cc:	438b      	bics	r3, r1
    17ce:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    17d0:	f000 f816 	bl	1800 <__libc_init_array>

        /* Branch to main function */
        main();
    17d4:	f7ff fc9c 	bl	1110 <main>

        /* Infinite loop */
        while (1);
    17d8:	e7fe      	b.n	17d8 <Reset_Handler+0x6c>
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	20000000 	.word	0x20000000
    17e0:	00001890 	.word	0x00001890
    17e4:	20000004 	.word	0x20000004
    17e8:	200000a8 	.word	0x200000a8
    17ec:	20000004 	.word	0x20000004
    17f0:	20000004 	.word	0x20000004
    17f4:	20000008 	.word	0x20000008
    17f8:	e000ed00 	.word	0xe000ed00
    17fc:	00001000 	.word	0x00001000

00001800 <__libc_init_array>:
    1800:	4b0e      	ldr	r3, [pc, #56]	; (183c <__libc_init_array+0x3c>)
    1802:	b570      	push	{r4, r5, r6, lr}
    1804:	2500      	movs	r5, #0
    1806:	1c1e      	adds	r6, r3, #0
    1808:	4c0d      	ldr	r4, [pc, #52]	; (1840 <__libc_init_array+0x40>)
    180a:	1ae4      	subs	r4, r4, r3
    180c:	10a4      	asrs	r4, r4, #2
    180e:	42a5      	cmp	r5, r4
    1810:	d004      	beq.n	181c <__libc_init_array+0x1c>
    1812:	00ab      	lsls	r3, r5, #2
    1814:	58f3      	ldr	r3, [r6, r3]
    1816:	4798      	blx	r3
    1818:	3501      	adds	r5, #1
    181a:	e7f8      	b.n	180e <__libc_init_array+0xe>
    181c:	f000 f828 	bl	1870 <_init>
    1820:	4b08      	ldr	r3, [pc, #32]	; (1844 <__libc_init_array+0x44>)
    1822:	2500      	movs	r5, #0
    1824:	1c1e      	adds	r6, r3, #0
    1826:	4c08      	ldr	r4, [pc, #32]	; (1848 <__libc_init_array+0x48>)
    1828:	1ae4      	subs	r4, r4, r3
    182a:	10a4      	asrs	r4, r4, #2
    182c:	42a5      	cmp	r5, r4
    182e:	d004      	beq.n	183a <__libc_init_array+0x3a>
    1830:	00ab      	lsls	r3, r5, #2
    1832:	58f3      	ldr	r3, [r6, r3]
    1834:	4798      	blx	r3
    1836:	3501      	adds	r5, #1
    1838:	e7f8      	b.n	182c <__libc_init_array+0x2c>
    183a:	bd70      	pop	{r4, r5, r6, pc}
    183c:	0000187c 	.word	0x0000187c
    1840:	0000187c 	.word	0x0000187c
    1844:	0000187c 	.word	0x0000187c
    1848:	00001880 	.word	0x00001880
    184c:	00001368 	.word	0x00001368
    1850:	00001348 	.word	0x00001348
    1854:	00001348 	.word	0x00001348
    1858:	000013c8 	.word	0x000013c8
    185c:	0000135a 	.word	0x0000135a
    1860:	00001376 	.word	0x00001376
    1864:	0000134c 	.word	0x0000134c
    1868:	00001384 	.word	0x00001384
    186c:	000013b8 	.word	0x000013b8

00001870 <_init>:
    1870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1876:	bc08      	pop	{r3}
    1878:	469e      	mov	lr, r3
    187a:	4770      	bx	lr

0000187c <__init_array_start>:
    187c:	000010d9 	.word	0x000010d9

00001880 <_fini>:
    1880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1882:	46c0      	nop			; (mov r8, r8)
    1884:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1886:	bc08      	pop	{r3}
    1888:	469e      	mov	lr, r3
    188a:	4770      	bx	lr

0000188c <__fini_array_start>:
    188c:	000010b1 	.word	0x000010b1
